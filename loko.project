{
  "name": "docker-utils-ext",
  "id": "docker-utils-ext",
  "description": "",
  "created_on": "19/09/2022, 08:55:08",
  "last_modify": "27/09/2022, 17:03:11",
  "graphs": {
    "main": {
      "nodes": [
        {
          "id": "c489fd92-f51b-4bb4-9378-1d1861a0f0cd",
          "position": {
            "x": 347.6185509640567,
            "y": 324.47377975042514
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 347.6185509640567,
            "y": 324.47377975042514
          },
          "__class__": "Node"
        },
        {
          "id": "79ea9c22-b066-46df-8f9a-f62e560c93a2",
          "position": {
            "x": 330.91273088959315,
            "y": 102.41314347932439
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 1036,
          "height": 168,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "List and count stacks on your system",
            "fill": "#FC8930",
            "height": 168,
            "width": 1036
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 330.91273088959315,
            "y": 102.41314347932439
          },
          "__class__": "Node"
        },
        {
          "id": "2367c2d4-2ad1-4f3a-9cbe-093cea21bc2d",
          "position": {
            "x": 352.3812251410659,
            "y": 140.71298053842034
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 352.3812251410659,
            "y": 140.71298053842034
          },
          "__class__": "Node"
        },
        {
          "id": "7c0fd743-dc76-45ae-a5aa-097c3ee07304",
          "position": {
            "x": 743.6222069953975,
            "y": 157.67100437361657
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Selector",
            "events": null,
            "description": "### Description\nThe SELECTOR component is used to select the value of one or more object keys. The required key/s are defined using the parameter **Keys**.\n\nIn order to add other keys you need to click on the **\"Add field\"** buttons.\n \nIf the field **Ignore Error** is toggled, missing key values are ignored.\n\nIt's also possible to select nested key, just by writing them in a *key* field, and seperating them using a full stop. Let's consider the object in the example below: if you want to have access to the content of the \"key3\" object, you need to use the following notation \"key1.key2.key3\".\n\n\n```json\n {\"key1\":{\"key2\":{\"key3\":[\"val1\", \"val2\", \"val3\"]}}} \n```\n\n\n\n### Input\n\nThe input consists of a dictionary.\n\n\n\n### Output\n\nThe output is the value of the required key of the dictionary received as input, if only one key is selected; otherwise it's an object which contains the keys specified and their value.\n",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "ignore_err",
                  "label": "Ignor Error",
                  "type": "boolean",
                  "description": "Choose whether to ignore error in case of a missing key or not"
                },
                {
                  "name": "keys",
                  "label": "Keys",
                  "type": "multiKeyValue",
                  "validation": {
                    "required": "Required field"
                  },
                  "description": "the name of the key to select from the incoming message",
                  "fields": [
                    {
                      "name": "k",
                      "placeholder": "key",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": null,
              "icon": "RiCursorFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "ignore_err": false,
                "keys": [
                  {
                    "k": "name",
                    "id": "3948b240-aac2-4c49-bb3f-f2722edd9b30"
                  }
                ]
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 743.6222069953975,
            "y": 157.67100437361657
          },
          "__class__": "Node"
        },
        {
          "id": "6b674009-ff12-4cde-b768-5530d5309685",
          "position": {
            "x": 938.3609917900416,
            "y": 155.78294944269166
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Grouper",
            "events": null,
            "description": "### Description\nThe GROUPER component is used to group the elements received in input. The items will be returned in batches with a maximum size equal to **Group size**.\n\n### Input\nIn this case there is no fixed input format.\n\n### Output\nIn output lists of elements received in input with a maximum length equal to **Group size**.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "n",
                  "label": "Group size",
                  "type": "number"
                }
              ],
              "click": null,
              "icon": "RiGroupFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "n": "100"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 938.3609917900416,
            "y": 155.78294944269166
          },
          "__class__": "Node"
        },
        {
          "id": "6529127c-36c6-4f80-b43b-63aa81127abe",
          "position": {
            "x": 1169.1543995470452,
            "y": 159.7420952386782
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "propagate": true,
                "notify_warnings": true,
                "code": "n = len(data)\n\nif n == 1:\n  count = (f'There is {n} stack on your system, here his name: ')\nelse:\n  count = (f'There are {n} stacks on your system, here their names: ')\n\nreturn (f'{count} {data}')"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1169.1543995470452,
            "y": 159.7420952386782
          },
          "__class__": "Node"
        },
        {
          "id": "fe542893-b6d2-4d5c-a84f-317fa7295524",
          "position": {
            "x": 773.9947309008676,
            "y": 341.40978075754356
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "propagate": true,
                "notify_warnings": true,
                "code": "import json\n\ncontainers = []\nimages = []\n\nstack_name = data['name']\ncount = len(data['children'])\n\nif count == 0:\n  output = (f\"No running containers for stack \\\"{stack_name}\\\"\")\n  return output\n\nelse:\n  for n in range (0, count):\n    containers.append(data['children'][n]['name'])\n    images.append(data['children'][n]['image'])\n    img_out = dict(zip(containers, images))\n    \n\n  output = { \"stack name\": data['name'] , \"stack id\": data['id'], \"images\": [img_out] }\n  \n  return output\n\n"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 773.9947309008676,
            "y": 341.40978075754356
          },
          "__class__": "Node"
        },
        {
          "id": "080a6891-a9c2-4000-9f43-cbcc2c46d3ea",
          "position": {
            "x": 332.6185509640567,
            "y": 284.02930300046467
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 619.7080001890362,
          "height": 172.3804777570789,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Print running containers in every stack",
            "fill": "#43AA8B",
            "height": 172.3804777570789,
            "width": 619.7080001890362
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 332.6185509640567,
            "y": 284.02930300046467
          },
          "__class__": "Node"
        },
        {
          "id": "7cbae37d-2882-4fe5-b63c-76258825a0d7",
          "position": {
            "x": 388,
            "y": 514.0058097839355
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 388,
            "y": 514.0058097839355
          },
          "__class__": "Node"
        },
        {
          "id": "9b806b99-36f3-4dda-9978-aaceafe06166",
          "position": {
            "x": 1087.3789573075737,
            "y": 529.1614876607921
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 156,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "File Writer",
            "events": null,
            "description": "### Description\nThe FILE WRITER component allows you to write files. The **Append** parameter allows you to write a file using multiple inputs. The destination path of the file can be defined when creating the block or passed as input in the previous block. In this way you have the possibility to write multiple files using one block.\n\n### Input\nUsing the parameter **Save as**, the format of the data to be received as input is defined. The available formats are: *text*, *bytes* and *json*. To define the destination path of the file instead, the input is defined as:\n```python\nParameters(data = data, path = filename)\n```\n\n### Output\nThe output confirms that the file has been written with the string: **Written to filename**.",
            "inputs": [
              {
                "id": "input",
                "label": "input",
                "closed": false
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Outputs",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "path",
                  "type": "text",
                  "label": "Path"
                },
                {
                  "name": "type",
                  "label": "Save as",
                  "type": "select",
                  "options": [
                    "text",
                    "bytes",
                    "json"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "append",
                  "label": "Append",
                  "type": "dynamic",
                  "dynamicType": "boolean",
                  "condition": "[\"text\", \"bytes\"].includes({parent})",
                  "parent": "type"
                },
                {
                  "name": "overwrite",
                  "type": "dynamic",
                  "dynamicType": {
                    "true": "boolean"
                  },
                  "parent": "append",
                  "label": "Overwrite"
                }
              ],
              "click": null,
              "icon": "RiFileEditFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "path": "",
                "type": "text",
                "append": false
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1087.3789573075737,
            "y": 529.1614876607921
          },
          "__class__": "Node"
        },
        {
          "id": "2602e96e-76c3-4d07-96c7-4b9ae28664ab",
          "position": {
            "x": 341,
            "y": 473.0058097839356
          },
          "type": "comment",
          "dragHandle": "#commentHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 1189.3789573075737,
          "height": 167.99999999999994,
          "selected": false,
          "dragging": false,
          "data": {
            "comment": "Download docker-compose.yml",
            "fill": "#F9C74F",
            "height": 167.99999999999994,
            "width": 1189.3789573075737
          },
          "zIndex": -1,
          "selectable": false,
          "connectable": false,
          "positionAbsolute": {
            "x": 341,
            "y": 473.0058097839356
          },
          "__class__": "Node"
        },
        {
          "id": "df255d7f-828c-402f-aa1c-30f54b933b54",
          "position": {
            "x": 893.0249266746467,
            "y": 527.6392408844065
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "propagate": true,
                "notify_warnings": true,
                "code": "from datetime import datetime\n\nnow_formatted = datetime.now().strftime(\"%Y-%m-%d--%H-%M\")\n\nfilename = \"data/data/docker-compose-\" + now_formatted + \".yml\"\n\nreturn Parameters(data = data, path = filename)"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 893.0249266746467,
            "y": 527.6392408844065
          },
          "__class__": "Node"
        },
        {
          "id": "16c1c38d-b6e9-4c07-b43e-9ad05398e386",
          "position": {
            "x": 548,
            "y": 158
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Stacks Info",
            "events": null,
            "description": "\n### Stacks Info\n\nWith this extension you can view all the info about your stacks\n\nYou can then use a function efter this block to manipulate and filter all the data you need to use it.",
            "inputs": [
              {
                "id": "input",
                "label": "Input",
                "service": "stacks",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "Output"
              }
            ],
            "configured": true,
            "options": {
              "group": null,
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                }
              ],
              "click": null,
              "icon": null,
              "values": {
                "n": 1
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 548,
            "y": 158
          },
          "__class__": "Node"
        },
        {
          "id": "adb7a804-eaa5-4336-992f-1b249c0e7158",
          "position": {
            "x": 561,
            "y": 346
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 156,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Stacks Info",
            "events": null,
            "description": "\n### Stacks Info\n\nWith this extension you can view all the info about your stacks\n\nYou can then use a function efter this block to manipulate and filter all the data you need to use it.",
            "inputs": [
              {
                "id": "input",
                "label": "Input",
                "service": "stacks",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "Output"
              }
            ],
            "configured": true,
            "options": {
              "group": null,
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                }
              ],
              "click": null,
              "icon": null,
              "values": {
                "n": 1
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 561,
            "y": 346
          },
          "__class__": "Node"
        },
        {
          "id": "d2ca7afd-b028-4d38-811f-0b348eaacb6f",
          "position": {
            "x": 1023,
            "y": 317
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "HTTP Request",
            "events": null,
            "description": "### Description\nThe HTTP REQUEST component is used to make HTTP requests in the web to microservices external to the LOKO AI platform.\n\n### Input\nInput is only required for HTTP methods that have or require a body (PUT/PATCH/POST). In this case there is no predefined input format.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "type": "text",
                  "name": "url",
                  "label": "URL",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "method",
                  "label": "Method",
                  "type": "select",
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "accept",
                  "label": "Accept",
                  "type": "select",
                  "options": [
                    "text",
                    "json",
                    "file"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "query",
                  "label": "Query params",
                  "type": "multiKeyValue",
                  "fields": [
                    {
                      "name": "key",
                      "placeholder": "Key",
                      "validation": {
                        "required": "Required field"
                      }
                    },
                    {
                      "name": "value",
                      "placeholder": "Value",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": "Launch request",
              "icon": "RiUploadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "url": "http://docker-utils-ext_docker-utils:8080/ds4biz/ds4biz-docker/0.2/stacks",
                "method": "GET",
                "accept": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 1023,
            "y": 317
          },
          "__class__": "Node"
        },
        {
          "id": "b28cfb80-f05e-4cac-a1ee-4159e9b83a0f",
          "position": {
            "x": 1303,
            "y": 525
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "Information",
                "debug": true,
                "propagate": true,
                "notify_warnings": true,
                "code": "s1 = \"Depending on the version of Docker installed on your system, you may have duplicate ports in the docker-compose export: \"\ns2 = \"this is not a bug, but a \\\"features\\\" introduced in the latests version of Docker (>= 20.10.6).\"\ns3 = \"But, if you run this docker-compose, you will NOT have any problems! For more informations, read here: https://github.com/moby/moby/issues/42313 \"\n\nreturn s1 + s2 + s3\n"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "78bcfde1-4d4b-4ae0-9569-9e82eda245b7",
          "position": {
            "x": 585.6495119039749,
            "y": 528.3436978863957
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Export Docker-compose",
            "events": null,
            "description": "\n### Stack Export\n\nWith this extension you can export the docker-compose.yml of your stack\nYou need to configure this block with the id of your stack\n(you can use \"Stack Info\" block to take it.",
            "inputs": [
              {
                "id": "input",
                "label": "Input",
                "service": "export",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "Output"
              }
            ],
            "configured": true,
            "options": {
              "group": null,
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "stack_id",
                  "type": "text",
                  "label": "id",
                  "helper": "Your stack's ID",
                  "group": "",
                  "value": null,
                  "description": ""
                }
              ],
              "click": null,
              "icon": null,
              "values": {
                "comment": "",
                "alias": "",
                "debug": false,
                "stack_id": "8f2d55a80b63d0b59832f911689fad881160ac0c79640d0824a3c128f3db592e"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 585.6495119039749,
            "y": 528.3436978863957
          },
          "__class__": "Node"
        },
        {
          "id": "bc8da6ca-7df2-4b7d-8c45-c0bce2c552f1",
          "position": {
            "x": 353.99095066504634,
            "y": 680.0800554978939
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "__class__": "Node"
        },
        {
          "id": "91003a11-c4d9-4e59-b2fe-2c957858e613",
          "position": {
            "x": 675.2183522026991,
            "y": 700.0254508411916
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "List images in Livetech Registry",
            "events": null,
            "description": "\n### List images in Livetech Registry\n\nWith this extension you can see all Docker images pushed on Private Livetech Registry\nYou need to configure this block with the name of the image you want to search.\nYou don't need to insert the full name of the image, but you can use also search a part of it.\n(for example, you can search \"stor\" to search \"storage\"",
            "inputs": [
              {
                "id": "input",
                "label": "Input",
                "service": "list-images",
                "to": "output"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "Output"
              }
            ],
            "configured": true,
            "options": {
              "group": null,
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "registry_name",
                  "type": "text",
                  "label": "Registry name",
                  "helper": "The name of Livetech Private Registry",
                  "group": "",
                  "value": null,
                  "description": ""
                },
                {
                  "name": "image_name",
                  "type": "text",
                  "label": "Image name to search",
                  "helper": "Image name to search",
                  "group": "",
                  "value": null,
                  "description": ""
                }
              ],
              "click": null,
              "icon": null,
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "registry_name": "registry.livetech.site",
                "image_name": "stor"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 675.2183522026991,
            "y": 700.0254508411916
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-7c0fd743-dc76-45ae-a5aa-097c3ee07304output-6b674009-ff12-4cde-b768-5530d5309685input",
          "source": "7c0fd743-dc76-45ae-a5aa-097c3ee07304",
          "sourceHandle": "output",
          "target": "6b674009-ff12-4cde-b768-5530d5309685",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-6b674009-ff12-4cde-b768-5530d5309685output-6529127c-36c6-4f80-b43b-63aa81127abeinput",
          "source": "6b674009-ff12-4cde-b768-5530d5309685",
          "sourceHandle": "output",
          "target": "6529127c-36c6-4f80-b43b-63aa81127abe",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-df255d7f-828c-402f-aa1c-30f54b933b54output-9b806b99-36f3-4dda-9978-aaceafe06166input",
          "source": "df255d7f-828c-402f-aa1c-30f54b933b54",
          "sourceHandle": "output",
          "target": "9b806b99-36f3-4dda-9978-aaceafe06166",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#56DCB9"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-c489fd92-f51b-4bb4-9378-1d1861a0f0cdoutput-adb7a804-eaa5-4336-992f-1b249c0e7158input",
          "source": "c489fd92-f51b-4bb4-9378-1d1861a0f0cd",
          "sourceHandle": "output",
          "target": "adb7a804-eaa5-4336-992f-1b249c0e7158",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-adb7a804-eaa5-4336-992f-1b249c0e7158output-fe542893-b6d2-4d5c-a84f-317fa7295524input",
          "source": "adb7a804-eaa5-4336-992f-1b249c0e7158",
          "sourceHandle": "output",
          "target": "fe542893-b6d2-4d5c-a84f-317fa7295524",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-2367c2d4-2ad1-4f3a-9cbe-093cea21bc2doutput-16c1c38d-b6e9-4c07-b43e-9ad05398e386input",
          "source": "2367c2d4-2ad1-4f3a-9cbe-093cea21bc2d",
          "sourceHandle": "output",
          "target": "16c1c38d-b6e9-4c07-b43e-9ad05398e386",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-16c1c38d-b6e9-4c07-b43e-9ad05398e386output-7c0fd743-dc76-45ae-a5aa-097c3ee07304input",
          "source": "16c1c38d-b6e9-4c07-b43e-9ad05398e386",
          "sourceHandle": "output",
          "target": "7c0fd743-dc76-45ae-a5aa-097c3ee07304",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-9b806b99-36f3-4dda-9978-aaceafe06166output-b28cfb80-f05e-4cac-a1ee-4159e9b83a0finput",
          "source": "9b806b99-36f3-4dda-9978-aaceafe06166",
          "sourceHandle": "output",
          "target": "b28cfb80-f05e-4cac-a1ee-4159e9b83a0f",
          "targetHandle": "input",
          "data": {
            "startColor": "#56DCB9",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-7cbae37d-2882-4fe5-b63c-76258825a0d7output-78bcfde1-4d4b-4ae0-9569-9e82eda245b7input",
          "source": "7cbae37d-2882-4fe5-b63c-76258825a0d7",
          "sourceHandle": "output",
          "target": "78bcfde1-4d4b-4ae0-9569-9e82eda245b7",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-78bcfde1-4d4b-4ae0-9569-9e82eda245b7output-df255d7f-828c-402f-aa1c-30f54b933b54input",
          "source": "78bcfde1-4d4b-4ae0-9569-9e82eda245b7",
          "sourceHandle": "output",
          "target": "df255d7f-828c-402f-aa1c-30f54b933b54",
          "targetHandle": "input",
          "data": {
            "startColor": "#888",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        },
        {
          "id": "reactflow__edge-bc8da6ca-7df2-4b7d-8c45-c0bce2c552f1output-91003a11-c4d9-4e59-b2fe-2c957858e613input",
          "source": "bc8da6ca-7df2-4b7d-8c45-c0bce2c552f1",
          "sourceHandle": "output",
          "target": "91003a11-c4d9-4e59-b2fe-2c957858e613",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#888"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    },
    "test": {
      "nodes": [
        {
          "id": "d0cc472e-4972-4326-8a0e-1347e8759537",
          "position": {
            "x": 380.0177277453298,
            "y": 104.21316954139252
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Trigger",
            "events": null,
            "description": "### Description\nThe TRIGGER component is used to start streams.\n\n### Output\nThe parameter Type can be set as a **String** or an **Object**. The parameter Value, on the other hand, defines the actual output of the component.",
            "inputs": [],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "type",
                  "type": "select",
                  "description": "The type of data",
                  "label": "Type",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": [
                    "String",
                    "Object"
                  ],
                  "value": null
                },
                {
                  "name": "value",
                  "type": "dynamic",
                  "dynamicType": {
                    "String": "area",
                    "Object": "code"
                  },
                  "parent": "type",
                  "label": "Value",
                  "validation": {
                    "required": "Required field"
                  }
                }
              ],
              "click": "Send message",
              "icon": "RiPlayFill",
              "values": {
                "type": "String",
                "value": "Hello world!"
              }
            }
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 380.0177277453298,
            "y": 104.21316954139252
          },
          "__class__": "Node"
        },
        {
          "id": "005e58a3-98e6-45a4-b068-8633b2a74bd9",
          "position": {
            "x": 653.6282565517854,
            "y": 128.1538090259886
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 150,
          "height": 56,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "Function",
            "events": null,
            "description": "### Description\nThe FUNCTION component is used to apply Python code to the input component's. The input can be retrieved using the variable *data*.\n\nTo be able to use data from components of type FUNCTION that are not linked together, the object is set repository.\n\n```python\nrepository.set('value', 5) - this sets the variable value to 5.\nrepository.get('value') - in this way the variable is called value and the value 5 is returned.\n```\n\n### Input\nThe input is used by the component using the variable **data**.\n\n### Output\nThe output coincides with the return of the code defined when the component was created.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "Common",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "name": "propagate",
                  "type": "boolean",
                  "label": "Flush at the end"
                },
                {
                  "name": "notify_warnings",
                  "type": "boolean",
                  "label": "Notify warnings"
                },
                {
                  "name": "code",
                  "type": "code",
                  "description": "A python function that processes the incoming message. \nVariables available are:\n- **data**: the incoming message\n",
                  "label": "Code",
                  "validation": {
                    "required": "Required field"
                  },
                  "fragment": null,
                  "advanced": false,
                  "options": null,
                  "value": null
                }
              ],
              "click": null,
              "icon": "RiCodeSSlashFill",
              "values": {
                "comment": "",
                "alias": "Date&Time",
                "debug": true,
                "propagate": true,
                "notify_warnings": true,
                "code": "from datetime import datetime\n\nnow = datetime.now()\nnow_formatted = now.strftime(\"%Y-%m-%d--%H-%M\")\n\nreturn now_formatted"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 653.6282565517854,
            "y": 128.1538090259886
          },
          "__class__": "Node"
        },
        {
          "id": "ff06368c-2ce0-40b1-9770-c06e491fc3c4",
          "position": {
            "x": 461,
            "y": 262.00580978393555
          },
          "type": "custom",
          "dragHandle": "#nodeHandle",
          "sourcePosition": "right",
          "targetPosition": "left",
          "width": 164,
          "height": 88,
          "selected": false,
          "dragging": false,
          "data": {
            "name": "HTTP Request",
            "events": null,
            "description": "### Description\nThe HTTP REQUEST component is used to make HTTP requests in the web to microservices external to the LOKO AI platform.\n\n### Input\nInput is only required for HTTP methods that have or require a body (PUT/PATCH/POST). In this case there is no predefined input format.\n\n### Output\nIn this case there is no fixed output format.",
            "inputs": [
              {
                "id": "input",
                "label": "input"
              }
            ],
            "outputs": [
              {
                "id": "output",
                "label": "output"
              }
            ],
            "configured": true,
            "options": {
              "group": "HTTP",
              "args": [
                {
                  "name": "comment",
                  "type": "area",
                  "label": "Node comment",
                  "helper": "Use it to explain the usage of this node"
                },
                {
                  "name": "alias",
                  "type": "text",
                  "label": "Name",
                  "helper": "Use this name as an alias"
                },
                {
                  "name": "debug",
                  "type": "boolean",
                  "label": "Debug to Console",
                  "divider": true
                },
                {
                  "type": "text",
                  "name": "url",
                  "label": "URL",
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "method",
                  "label": "Method",
                  "type": "select",
                  "options": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "accept",
                  "label": "Accept",
                  "type": "select",
                  "options": [
                    "text",
                    "json",
                    "file"
                  ],
                  "validation": {
                    "required": "Required field"
                  }
                },
                {
                  "name": "query",
                  "label": "Query params",
                  "type": "multiKeyValue",
                  "fields": [
                    {
                      "name": "key",
                      "placeholder": "Key",
                      "validation": {
                        "required": "Required field"
                      }
                    },
                    {
                      "name": "value",
                      "placeholder": "Value",
                      "validation": {
                        "required": "Required field"
                      }
                    }
                  ]
                }
              ],
              "click": "Launch request",
              "icon": "RiUploadCloud2Fill",
              "values": {
                "comment": "",
                "alias": "",
                "debug": true,
                "url": "http://docker_utils_docker_utils_ext:8080/ds4biz/ds4biz-docker/0.2/stacks",
                "method": "GET",
                "accept": "json"
              }
            },
            "locked": null
          },
          "selectable": true,
          "draggable": true,
          "positionAbsolute": {
            "x": 461,
            "y": 262.00580978393555
          },
          "__class__": "Node"
        }
      ],
      "edges": [
        {
          "id": "reactflow__edge-d0cc472e-4972-4326-8a0e-1347e8759537output-005e58a3-98e6-45a4-b068-8633b2a74bd9input",
          "source": "d0cc472e-4972-4326-8a0e-1347e8759537",
          "sourceHandle": "output",
          "target": "005e58a3-98e6-45a4-b068-8633b2a74bd9",
          "targetHandle": "input",
          "data": {
            "startColor": "#D770AD",
            "stopColor": "#D770AD"
          },
          "selected": false,
          "dragging": false,
          "__class__": "Edge"
        }
      ],
      "__class__": "Graph"
    }
  },
  "open": [
    "main"
  ],
  "active": "main",
  "version": "1.0.0",
  "__class__": "Project"
}